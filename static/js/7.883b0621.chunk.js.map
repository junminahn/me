{"version":3,"sources":["services/axios.js","services/data.js","pages/Address.js"],"names":["instance","axios","create","baseURL","process","timeout","_encryptionKey","fetchData","url","fallbackValue","a","get","then","res","data","console","error","isObject","bytes","AES","decrypt","plaintext","toString","CryptoUtf8","JSON","parse","getAddress","setEncryptionKey","key","isEncryptionKeySet","Address","useState","addresses","setAddresses","useEffect","getData","to","bounds","Leaflet","latLngBounds","map","address","lat","lon","celled","Header","Row","HeaderCell","Body","length","i","Cell","ribbon","color","start","end","zoom","scrollWheelZoom","style","width","height","attribution","position"],"mappings":"oTAIaA,E,OAAWC,EAAMC,OAAO,CACnCC,QAAQ,GAAD,OAHMC,MAGN,KACPC,QAAS,ICDPC,EAAiB,KAIfC,EAAS,uCAAG,WAAOC,EAAKC,GAAZ,mBAAAC,EAAA,+EAEKV,EAASW,IAAIH,GAAKI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAAMC,QAAQC,OAFrD,UAERF,EAFQ,QAIVG,IAASH,GAJC,yCAKLA,GALK,cAQRI,EAAQC,IAAIC,QAAQN,EAAMR,GAC1Be,EAAYH,EAAMI,SAASC,KATnB,kBAUPC,KAAKC,MAAMJ,IAVJ,2DAYPZ,GAZO,0DAAH,wDAgBR,SAAeiB,IAAtB,+B,4CAAO,sBAAAhB,EAAA,+EACEH,EAAU,qBAAsB,KADlC,4C,sBAIA,SAASoB,EAAiBC,GAC/BtB,EAAiBsB,EAGZ,SAASC,IAGd,QAASvB,I,sYCsCIwB,UAnEC,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACbC,EADa,KACFC,EADE,KAYpB,GATAC,qBAAU,YACK,uCAAG,4BAAAxB,EAAA,sEACKgB,cADL,OACRZ,EADQ,OAEdmB,EAAanB,GAFC,2CAAH,qDAKbqB,KACC,KAEEN,cAAsB,OAAO,cAAC,IAAD,CAAUO,GAAG,MAE/C,IAAMC,EAASC,IAAQC,aAAaP,EAAUQ,KAAI,SAAAC,GAAO,MAAI,CAACA,EAAQC,IAAKD,EAAQE,SAEnF,OACE,eAAC,IAAD,WACE,eAAC,IAAD,CAAOC,QAAM,EAAb,UACE,cAAC,IAAMC,OAAP,UACE,eAAC,IAAMC,IAAP,WACE,cAAC,IAAMC,WAAP,sBACA,cAAC,IAAMA,WAAP,wBACA,cAAC,IAAMA,WAAP,2BAIJ,cAAC,IAAMC,KAAP,UACGhB,EAAUiB,OAAS,GAClBjB,EAAUQ,KAAI,SAACC,EAASS,GAAV,OACZ,eAAC,IAAMJ,IAAP,WACE,cAAC,IAAMK,KAAP,UACS,IAAND,EACC,cAAC,IAAD,CAAOE,QAAM,EAACC,MAAM,QAApB,SACGZ,EAAQA,UAGX,+BAAOA,EAAQA,YAGnB,cAAC,IAAMU,KAAP,UAAaV,EAAQa,QACrB,cAAC,IAAMH,KAAP,UAAaV,EAAQc,KAAO,QAXdd,EAAQA,iBAgB/BT,EAAUiB,QACT,eAAC,IAAD,CAAcO,KAAM,GAAIC,iBAAiB,EAAOpB,OAAQA,EAAQqB,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAAhG,UACE,cAAC,IAAD,CACEC,YAAY,yEACZrD,IAAI,uDAELwB,EAAUQ,KAAI,SAACC,EAASS,GAAV,OACb,cAAC,IAAD,CAAQY,SAAU,CAACrB,EAAQC,IAAKD,EAAQE,KAAxC,SACE,eAAC,IAAD,WACGF,EAAQA,QACT,uBACCA,EAAQa,MAHX,MAGqBb,EAAQc,QAJoBd,EAAQA","file":"static/js/7.883b0621.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst apiUrl = process.env.REACT_APP_API_URL || '/';\n\nexport const instance = axios.create({\n  baseURL: `${apiUrl}/`,\n  timeout: 0,\n});\n","import AES from 'crypto-js/aes';\nimport CryptoUtf8 from 'crypto-js/enc-utf8';\nimport isObject from 'lodash/isObject';\nimport { instance } from './axios';\n\nlet _encryptionKey = null;\n\nconst encryptData = process.env.REACT_APP_ENCRYPT_DATA || 'false';\n\nconst fetchData = async (url, fallbackValue) => {\n  try {\n    const data = await instance.get(url).then(res => res.data, console.error);\n\n    if (isObject(data)) {\n      return data;\n    }\n\n    const bytes = AES.decrypt(data, _encryptionKey);\n    const plaintext = bytes.toString(CryptoUtf8);\n    return JSON.parse(plaintext);\n  } catch (e) {\n    return fallbackValue;\n  }\n};\n\nexport async function getAddress() {\n  return fetchData('/data/address.json', []);\n}\n\nexport function setEncryptionKey(key) {\n  _encryptionKey = key;\n}\n\nexport function isEncryptionKeySet() {\n  if (encryptData !== 'true') return true;\n\n  return !!_encryptionKey;\n}\n","import React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Container, Label, Table } from 'semantic-ui-react';\nimport Leaflet from 'leaflet';\nimport { getAddress, isEncryptionKeySet } from 'services/data';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\n\nconst Address = () => {\n  const [addresses, setAddresses] = useState([]);\n\n  useEffect(() => {\n    const getData = async () => {\n      const data = await getAddress();\n      setAddresses(data);\n    };\n\n    getData();\n  }, []);\n\n  if (!isEncryptionKeySet()) return <Redirect to=\"/\" />;\n\n  const bounds = Leaflet.latLngBounds(addresses.map(address => [address.lat, address.lon]));\n\n  return (\n    <Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Address</Table.HeaderCell>\n            <Table.HeaderCell>Starts On</Table.HeaderCell>\n            <Table.HeaderCell>Ends On</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {addresses.length > 0 &&\n            addresses.map((address, i) => (\n              <Table.Row key={address.address}>\n                <Table.Cell>\n                  {i === 0 ? (\n                    <Label ribbon color=\"olive\">\n                      {address.address}\n                    </Label>\n                  ) : (\n                    <span>{address.address}</span>\n                  )}\n                </Table.Cell>\n                <Table.Cell>{address.start}</Table.Cell>\n                <Table.Cell>{address.end || '-'}</Table.Cell>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n      {addresses.length && (\n        <MapContainer zoom={13} scrollWheelZoom={false} bounds={bounds} style={{ width: '100%', height: '500px' }}>\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          {addresses.map((address, i) => (\n            <Marker position={[address.lat, address.lon]} key={address.address}>\n              <Popup>\n                {address.address}\n                <br />\n                {address.start} - {address.end}\n              </Popup>\n            </Marker>\n          ))}\n        </MapContainer>\n      )}\n    </Container>\n  );\n};\n\nexport default Address;\n"],"sourceRoot":""}